package library.managment;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.JSplitPane;
import java.awt.Font;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.BoxLayout;
import library.study_space_booking;

/**
 *
 * @author Nishant
 */
public class user_menu extends javax.swing.JFrame {

    /**
     * Creates new form Main_menu
     */
    public static String uName;
    private JMenuBar jMenuBar;
    private JMenu jMenuOptions;
    private JMenuItem jMenuItemStudySpace;
    private JMenuItem jMenuItemBookBorrowing;
    private JMenuItem jMenuItemCalculateFine;
    private JMenuItem jMenuItemCheckDueDate;
    private JMenuItem jMenuItemReturnBook;
    private JMenuItem jMenuItemExit;
    private JPanel jPanelMenu;
    private JPanel jPanelContent;
    private JSplitPane splitPane;

    public user_menu(String userName) {
        initComponents();
        uName = userName;
        setLocationRelativeTo(null); // Center the window
        setExtendedState(JFrame.MAXIMIZED_BOTH); // Maximize the window to cover the whole screen
        setJMenuBar(jMenuBar); // Ensure the menu bar is set

        // Display user details in the content panel
        displayUserDetailsInJPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanelMenu = new javax.swing.JPanel();
        jPanelContent = new javax.swing.JPanel();
        jLabelHeader = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuOptions = new javax.swing.JMenu();
        jMenuItemStudySpace = new javax.swing.JMenuItem();
        jMenuItemBookBorrowing = new javax.swing.JMenuItem();
        jMenuItemCalculateFine = new javax.swing.JMenuItem();
        jMenuItemCheckDueDate = new javax.swing.JMenuItem();
        jMenuItemReturnBook = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        splitPane = new javax.swing.JSplitPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        // Menu Panel (Left Side)
        jPanelMenu.setBackground(new java.awt.Color(44, 62, 80)); // Set background color
        jPanelMenu.setLayout(new javax.swing.BoxLayout(jPanelMenu, javax.swing.BoxLayout.Y_AXIS)); // Vertical layout

        // Header label
        jLabelHeader.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 28)); // Set font size
        jLabelHeader.setForeground(new java.awt.Color(255, 255, 255)); // Set text color to white
        jLabelHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelHeader.setText("USER MENU");
        jPanelMenu.add(jLabelHeader);

        // Menu items
        addMenuButton("Study Space Booking", evt -> showStudySpace());
        addMenuButton("Book Borrowing", evt -> showBookBorrowing());
        addMenuButton("Calculate Fine", evt -> showCalculateFine());
        addMenuButton("Check Due Date", evt -> showCheckDueDate());
        addMenuButton("Return Book", evt -> showReturnBook());
        addMenuButton("Exit", evt -> exitApplication());

        // Content Panel (Right Side)
        jPanelContent.setBackground(new java.awt.Color(255, 255, 255)); // White background for content
        jPanelContent.setLayout(new java.awt.CardLayout());

        // Add default content to the content panel
        JLabel defaultLabel = new JLabel("");
        defaultLabel.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 24));
        defaultLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanelContent.add(defaultLabel, "default");

        // Split Pane
        splitPane.setDividerLocation(300); // Set the initial divider location (left panel width)
        splitPane.setLeftComponent(jPanelMenu);
        splitPane.setRightComponent(jPanelContent);

        // Add the split pane to the frame
        getContentPane().add(splitPane);

        // Menu bar
       
        jMenuOptions.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 16)); // Set font size

        // Add menu items to the menu
        jMenuOptions.add(jMenuItemStudySpace);
        jMenuOptions.add(jMenuItemBookBorrowing);
        jMenuOptions.add(jMenuItemCalculateFine);
        jMenuOptions.add(jMenuItemCheckDueDate);
        jMenuOptions.add(jMenuItemReturnBook);
        jMenuOptions.addSeparator(); // Add a separator
        jMenuOptions.add(jMenuItemExit);

        // Add menu to the menu bar
        jMenuBar.add(jMenuOptions);

        // Set the menu bar
        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addMenuButton(String text, java.awt.event.ActionListener actionListener) {
        JMenuItem menuItem = new JMenuItem(text);
        menuItem.setFont(new java.awt.Font("Arial", java.awt.Font.PLAIN, 16));
        menuItem.setForeground(new java.awt.Color(255, 255, 255)); // White text
        menuItem.setBackground(new java.awt.Color(0, 102, 204)); // Blue background
        menuItem.setOpaque(true); // Ensure the background color is visible
        menuItem.setBorderPainted(false); // Remove border

        // Add hover effect
        menuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                menuItem.setBackground(new java.awt.Color(0, 153, 255)); // Lighter blue on hover
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                menuItem.setBackground(new java.awt.Color(0, 102, 204)); // Original blue
            }
        });

        menuItem.addActionListener(actionListener);
        jPanelMenu.add(menuItem);
    }

    private void showStudySpace() {
        new study_space_booking(uName).setVisible(true);
    }

    private void showBookBorrowing() {
        new book_borrowing(uName).setVisible(true);
    }

    private void showCalculateFine() {
        new calculate_fine(uName).setVisible(true);
    }

    private void showCheckDueDate() {
        String userName = JOptionPane.showInputDialog("Enter User Name to check due date:");
        if (userName != null && !userName.trim().isEmpty()) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/DBMS_Project", "root", "12345678");
                String sql = "SELECT bookId, dueDate FROM borrowing_history WHERE userName = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, userName);
                ResultSet rs = pst.executeQuery();
                StringBuilder report = new StringBuilder();
                while (rs.next()) {
                    String bookId = rs.getString("bookId");
                    String dueDate = rs.getDate("dueDate").toString();
                    report.append("Book ID: ").append(bookId).append(", Due Date: ").append(dueDate).append("\n");
                }
                if (report.length() > 0) {
                    JOptionPane.showMessageDialog(null, report.toString());
                } else {
                    JOptionPane.showMessageDialog(null, "No records found for User Name " + userName);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {
            JOptionPane.showMessageDialog(null, "User Name cannot be empty.");
        }
    }

    private void showReturnBook() {
        String userName = JOptionPane.showInputDialog("Enter User Name:");
        String bookId = JOptionPane.showInputDialog("Enter Book ID to return:");
        if (userName != null && !userName.trim().isEmpty() && bookId != null && !bookId.trim().isEmpty()) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/DBMS_Project", "root", "12345678");
                String sql = "SELECT DATEDIFF(CURDATE(), dueDate) AS daysOverdue FROM borrowing_history WHERE userName = ? AND bookId = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1, userName);
                pst.setString(2, bookId);
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    int daysOverdue = rs.getInt("daysOverdue");
                    if (daysOverdue > 0) {
                        int fine = daysOverdue * 10; // Assuming fine is 10 units per day
                        int option = JOptionPane.showConfirmDialog(null, "You have a fine of " + fine + " Kshs. Do you want to pay the fine?", "Pay Fine", JOptionPane.YES_NO_OPTION);
                        if (option == JOptionPane.YES_OPTION) {
                            JOptionPane.showMessageDialog(null, "Please make a payment of " + fine + " Kshs via M-Pesa to account number 0758639632.");
                            // Additional logic to handle fine payment can be added here
                            // Assuming payment is successful, proceed to return the book
                            String deleteSql = "DELETE FROM borrowing_history WHERE userName = ? AND bookId = ?";
                            PreparedStatement deletePst = con.prepareStatement(deleteSql);
                            deletePst.setString(1, userName);
                            deletePst.setString(2, bookId);
                            int rowsDeleted = deletePst.executeUpdate();
                            if (rowsDeleted > 0) {
                                JOptionPane.showMessageDialog(null, "Book returned successfully.");
                            } else {
                                JOptionPane.showMessageDialog(null, "No record found for Book ID " + bookId);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Please pay the fine to return the book.");
                        }
                    } else {
                        // No fine, proceed to return the book
                        String deleteSql = "DELETE FROM borrowing_history WHERE userName = ? AND bookId = ?";
                        PreparedStatement deletePst = con.prepareStatement(deleteSql);
                        deletePst.setString(1, userName);
                        deletePst.setString(2, bookId);
                        int rowsDeleted = deletePst.executeUpdate();
                        if (rowsDeleted > 0) {
                            JOptionPane.showMessageDialog(null, "Book returned successfully.");
                        } else {
                            JOptionPane.showMessageDialog(null, "No record found for Book ID " + bookId);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No record found for User Name " + userName + " and Book ID " + bookId);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {
            JOptionPane.showMessageDialog(null, "User Name and Book ID cannot be empty.");
        }
    }

    private void displayUserDetailsInJPanel() {
        try {
            // Connect to the database
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/DBMS_Project", "root", "12345678");

            // Query user details from the student table
            String userDetailsQuery = "SELECT firstname, lastname, regNo, email FROM student WHERE userName = ?";
            PreparedStatement pst = con.prepareStatement(userDetailsQuery);
            pst.setString(1, uName);
            ResultSet rs = pst.executeQuery();

            // Clear the content panel
            jPanelContent.removeAll();

            if (rs.next()) {
                // Fetch user details
                String firstname = rs.getString("firstname");
                String lastname = rs.getString("lastname");
                String regNo = rs.getString("regNo");
                String email = rs.getString("email");

                // Create a header label
                JLabel headerLabel = new JLabel("Personal Information");
                headerLabel.setFont(new Font("Arial", Font.BOLD, 24));
                headerLabel.setForeground(new java.awt.Color(44, 62, 80)); // Dark blue color
                headerLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

                // Create labels for user details
                JLabel userNameLabel = new JLabel("<html><b>User Name:</b><br>" + uName + "</html>");
                userNameLabel.setFont(new Font("Arial", Font.PLAIN, 16));
                userNameLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

                JLabel firstNameLabel = new JLabel("<html><b>First Name:</b><br>" + firstname + "</html>");
                firstNameLabel.setFont(new Font("Arial", Font.PLAIN, 16));
                firstNameLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

                JLabel lastNameLabel = new JLabel("<html><b>Last Name:</b><br>" + lastname + "</html>");
                lastNameLabel.setFont(new Font("Arial", Font.PLAIN, 16));
                lastNameLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

                JLabel regNoLabel = new JLabel("<html><b>Registration No:</b><br>" + regNo + "</html>");
                regNoLabel.setFont(new Font("Arial", Font.PLAIN, 16));
                regNoLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

                JLabel emailLabel = new JLabel("<html><b>Email:</b><br>" + email + "</html>");
                emailLabel.setFont(new Font("Arial", Font.PLAIN, 16));
                emailLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

                // Add labels to the content panel
                jPanelContent.setLayout(new BoxLayout(jPanelContent, BoxLayout.Y_AXIS));
                jPanelContent.add(Box.createVerticalStrut(20)); // Add spacing
                jPanelContent.add(headerLabel);
                jPanelContent.add(Box.createVerticalStrut(20)); // Add spacing
                jPanelContent.add(userNameLabel);
                jPanelContent.add(Box.createVerticalStrut(10)); // Add spacing
                jPanelContent.add(firstNameLabel);
                jPanelContent.add(Box.createVerticalStrut(10)); // Add spacing
                jPanelContent.add(lastNameLabel);
                jPanelContent.add(Box.createVerticalStrut(10)); // Add spacing
                jPanelContent.add(regNoLabel);
                jPanelContent.add(Box.createVerticalStrut(10)); // Add spacing
                jPanelContent.add(emailLabel);
            } else {
                JLabel noDetailsLabel = new JLabel("No user details found.");
                noDetailsLabel.setFont(new Font("Arial", Font.BOLD, 16));
                noDetailsLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
                jPanelContent.add(noDetailsLabel);
            }

            // Refresh the content panel
            jPanelContent.revalidate();
            jPanelContent.repaint();

            // Close database connections
            rs.close();
            pst.close();
            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error fetching user details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void exitApplication() {
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Exit", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(user_menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(user_menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(user_menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(user_menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new user_menu(uName).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelHeader;
    // Duplicate declaration removed
    // Duplicate declaration removed
    // End of variables declaration//GEN-END:variables
}